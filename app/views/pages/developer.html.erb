<h1>Developer</h1>
<h2><a href="http://www.goodreads.com/book/show/1654215.The_Art_of_Agile_Development">The Art of Agile Development</a></h2>
<p>by James Shore, chromatic</p>

<p>
The Art of Agile Development contains practical guidance for anyone considering or applying agile development for building valuable software. Plenty of books describe what agile development is or why it helps software projects succeed, but very few combine information for developers, managers, testers, and customers into a single package that they can apply directly.
</p>
<p>
This book provides no-nonsense advice on agile planning, development, delivery, and management taken from the authors' many years of experience with Extreme Programming (XP). You get a gestalt view of the agile development process, including comprehensive guidance for non-technical readers and hands-on technical practices for developers and testers.
</p>
<p>
The Art of Agile Development gives you clear answers to questions such as:
</p>
<p>
How can we adopt agile development? Do we really need to pair program? What metrics should we report? What if I can't get my customer to participate? How much documentation should we write? When do we design and architect? As a non-developer, how should I work with my agile team? Where is my product roadmap? How does QA fit in? The book teaches you how to adopt XP practices, describes each practice in detail, then discusses principles that will allow you to modify XP and create your own agile method. In particular, this book tackles the difficult aspects of agile development: the need for cooperation and trust among team members.
</p>
<p>
Whether you're currently part of an agile team, working with an agile team, or interested in agile development, this book provides the practical tips you need to start practicing agile development. As your experience grows, the book will grow with you, providing exercises and information that will teach you first to understand the rules of agile development, break them, and ultimately abandon rules altogether as you master the art of agile development.
</p>

<h2><a href="http://www.goodreads.com/book/show/4099.The_Pragmatic_Programmer">The Pragmatic Programmer: From Journeyman to Master</a></h2>
<p>by Andrew Hunt, David Thomas</p>
<p>
Using anecdotes, analogies, examples and parables, this user-friendly guide offers techniques for getting any programming job done effectively, and can help any programmer improve skills, no matter what level. Incorporates today's top languages, including Java, C, C++, and Perl.
</p>

<h2><a href="http://www.goodreads.com/book/show/10284614-the-clean-coder">The Clean Coder: A Code of Conduct for Professional Programmers</a></h2>
<p>by Robert C. Martin</p>
<p>
Programmers who endure and succeed amidst swirling uncertainty and nonstop pressure share a common attribute: They care deeply about the practice of creating software. They treat it as a craft. They are professionals. In "The Clean Coder: A Code of Conduct for Professional Programmers, " legendary software expert Robert C. Martin introduces the disciplines, techniques, tools, and practices of true software craftsmanship. This book is packed with practical advice-about everything from estimating and coding to refactoring and testing. It covers much more than technique: It is about attitude. Martin shows how to approach software development with honor, self-respect, and pride; work well and work clean; communicate and estimate faithfully; face difficult decisions with clarity and honesty; and understand that deep knowledge comes with a responsibility to act. Readers will learn</p>

<ul>
<li>What it means to behave as a true software craftsman</li>
<li>How to deal with conflict, tight schedules, and unreasonable managers</li>
<li>How to get into the flow of coding, and get past writer's block</li>
<li>How to handle unrelenting pressure and avoid burnout</li>
<li>How to combine enduring attitudes with new development paradigms</li>
<li>How to manage your time, and avoid blind alleys, marshes, bogs, and swamps</li>
<li>How to foster environments where programmers and teams can thrive</li>
<li>When to say "No"-and how to say it</li>
<li>When to say "Yes"-and what yes really means</li>
</ul>
<p>Great software is something to marvel at: powerful, elegant, functional, a pleasure to work with as both a developer and as a user. Great software isn't written by machines. It is written by professionals with an unshakable commitment to craftsmanship. "The Clean Coder" will help you become one of them-and earn the pride and fulfillment that they alone possess.</p>
